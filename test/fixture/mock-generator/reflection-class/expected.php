<?php

/**
 * A mock class generated by Phony.
 *
 * @uses ReflectionClass
 *
 * This file is part of the Phony package.
 *
 * Copyright Â© 2014 Erin Millard
 *
 * For the full copyright and license information, please view the LICENSE file
 * that was distributed with the Phony source code.
 *
 * @link https://github.com/eloquent/phony
 */
class MockGeneratorReflectionClass
extends ReflectionClass
implements Eloquent\Phony\Mock\MockInterface
{
    /**
     * Inherited static method 'export'.
     *
     * @uses ReflectionClass::export()
     *
     * @param mixed $a0 Originally named 'argument'.
     * @param mixed $a1 Originally named 'return'.
     */
    public static function export(
        $a0,
        $a1 = null
    ) {
    }

    /**
     * Construct a mock.
     *
     * @param array<string,Eloquent\Phony\Stub\StubInterface>|null $stubs The stubs to use.
     */
    public function __construct(
        array $stubs = null
    ) {
        if (null === $stubs) {
            $stubs = array();
        }

        $this->_stubs = $stubs;
    }

    /**
     * Call the parent constructor.
     */
    public function _constructParent(
        $a0
    ) {
        call_user_func_array(
            array($this, 'parent::__construct'),
            func_get_args()
        );
    }

    /**
     * Inherited method '__toString'.
     *
     * @uses ReflectionClass::__toString()
     */
    public function __toString()
    {
    }

    /**
     * Inherited method 'getConstant'.
     *
     * @uses ReflectionClass::getConstant()
     *
     * @param mixed $a0 Originally named 'name'.
     */
    public function getConstant(
        $a0
    ) {
    }

    /**
     * Inherited method 'getConstants'.
     *
     * @uses ReflectionClass::getConstants()
     */
    public function getConstants()
    {
    }

    /**
     * Inherited method 'getConstructor'.
     *
     * @uses ReflectionClass::getConstructor()
     */
    public function getConstructor()
    {
    }

    /**
     * Inherited method 'getDefaultProperties'.
     *
     * @uses ReflectionClass::getDefaultProperties()
     */
    public function getDefaultProperties()
    {
    }

    /**
     * Inherited method 'getDocComment'.
     *
     * @uses ReflectionClass::getDocComment()
     */
    public function getDocComment()
    {
    }

    /**
     * Inherited method 'getEndLine'.
     *
     * @uses ReflectionClass::getEndLine()
     */
    public function getEndLine()
    {
    }

    /**
     * Inherited method 'getExtension'.
     *
     * @uses ReflectionClass::getExtension()
     */
    public function getExtension()
    {
    }

    /**
     * Inherited method 'getExtensionName'.
     *
     * @uses ReflectionClass::getExtensionName()
     */
    public function getExtensionName()
    {
    }

    /**
     * Inherited method 'getFileName'.
     *
     * @uses ReflectionClass::getFileName()
     */
    public function getFileName()
    {
    }

    /**
     * Inherited method 'getInterfaceNames'.
     *
     * @uses ReflectionClass::getInterfaceNames()
     */
    public function getInterfaceNames()
    {
    }

    /**
     * Inherited method 'getInterfaces'.
     *
     * @uses ReflectionClass::getInterfaces()
     */
    public function getInterfaces()
    {
    }

    /**
     * Inherited method 'getMethod'.
     *
     * @uses ReflectionClass::getMethod()
     *
     * @param mixed $a0 Originally named 'name'.
     */
    public function getMethod(
        $a0
    ) {
    }

    /**
     * Inherited method 'getMethods'.
     *
     * @uses ReflectionClass::getMethods()
     *
     * @param mixed $a0 Originally named 'filter'.
     */
    public function getMethods(
        $a0 = null
    ) {
    }

    /**
     * Inherited method 'getModifiers'.
     *
     * @uses ReflectionClass::getModifiers()
     */
    public function getModifiers()
    {
    }

    /**
     * Inherited method 'getName'.
     *
     * @uses ReflectionClass::getName()
     */
    public function getName()
    {
    }

    /**
     * Inherited method 'getNamespaceName'.
     *
     * @uses ReflectionClass::getNamespaceName()
     */
    public function getNamespaceName()
    {
    }

    /**
     * Inherited method 'getParentClass'.
     *
     * @uses ReflectionClass::getParentClass()
     */
    public function getParentClass()
    {
    }

    /**
     * Inherited method 'getProperties'.
     *
     * @uses ReflectionClass::getProperties()
     *
     * @param mixed $a0 Originally named 'filter'.
     */
    public function getProperties(
        $a0 = null
    ) {
    }

    /**
     * Inherited method 'getProperty'.
     *
     * @uses ReflectionClass::getProperty()
     *
     * @param mixed $a0 Originally named 'name'.
     */
    public function getProperty(
        $a0
    ) {
    }

    /**
     * Inherited method 'getShortName'.
     *
     * @uses ReflectionClass::getShortName()
     */
    public function getShortName()
    {
    }

    /**
     * Inherited method 'getStartLine'.
     *
     * @uses ReflectionClass::getStartLine()
     */
    public function getStartLine()
    {
    }

    /**
     * Inherited method 'getStaticProperties'.
     *
     * @uses ReflectionClass::getStaticProperties()
     */
    public function getStaticProperties()
    {
    }

    /**
     * Inherited method 'getStaticPropertyValue'.
     *
     * @uses ReflectionClass::getStaticPropertyValue()
     *
     * @param mixed $a0 Originally named 'name'.
     * @param mixed $a1 Originally named 'default'.
     */
    public function getStaticPropertyValue(
        $a0,
        $a1 = null
    ) {
    }

    /**
     * Inherited method 'getTraitAliases'.
     *
     * @uses ReflectionClass::getTraitAliases()
     */
    public function getTraitAliases()
    {
    }

    /**
     * Inherited method 'getTraitNames'.
     *
     * @uses ReflectionClass::getTraitNames()
     */
    public function getTraitNames()
    {
    }

    /**
     * Inherited method 'getTraits'.
     *
     * @uses ReflectionClass::getTraits()
     */
    public function getTraits()
    {
    }

    /**
     * Inherited method 'hasConstant'.
     *
     * @uses ReflectionClass::hasConstant()
     *
     * @param mixed $a0 Originally named 'name'.
     */
    public function hasConstant(
        $a0
    ) {
    }

    /**
     * Inherited method 'hasMethod'.
     *
     * @uses ReflectionClass::hasMethod()
     *
     * @param mixed $a0 Originally named 'name'.
     */
    public function hasMethod(
        $a0
    ) {
    }

    /**
     * Inherited method 'hasProperty'.
     *
     * @uses ReflectionClass::hasProperty()
     *
     * @param mixed $a0 Originally named 'name'.
     */
    public function hasProperty(
        $a0
    ) {
    }

    /**
     * Inherited method 'implementsInterface'.
     *
     * @uses ReflectionClass::implementsInterface()
     *
     * @param mixed $a0 Originally named 'interface'.
     */
    public function implementsInterface(
        $a0
    ) {
    }

    /**
     * Inherited method 'inNamespace'.
     *
     * @uses ReflectionClass::inNamespace()
     */
    public function inNamespace()
    {
    }

    /**
     * Inherited method 'isAbstract'.
     *
     * @uses ReflectionClass::isAbstract()
     */
    public function isAbstract()
    {
    }

    /**
     * Inherited method 'isCloneable'.
     *
     * @uses ReflectionClass::isCloneable()
     */
    public function isCloneable()
    {
    }

    /**
     * Inherited method 'isFinal'.
     *
     * @uses ReflectionClass::isFinal()
     */
    public function isFinal()
    {
    }

    /**
     * Inherited method 'isInstance'.
     *
     * @uses ReflectionClass::isInstance()
     *
     * @param mixed $a0 Originally named 'object'.
     */
    public function isInstance(
        $a0
    ) {
    }

    /**
     * Inherited method 'isInstantiable'.
     *
     * @uses ReflectionClass::isInstantiable()
     */
    public function isInstantiable()
    {
    }

    /**
     * Inherited method 'isInterface'.
     *
     * @uses ReflectionClass::isInterface()
     */
    public function isInterface()
    {
    }

    /**
     * Inherited method 'isInternal'.
     *
     * @uses ReflectionClass::isInternal()
     */
    public function isInternal()
    {
    }

    /**
     * Inherited method 'isIterateable'.
     *
     * @uses ReflectionClass::isIterateable()
     */
    public function isIterateable()
    {
    }

    /**
     * Inherited method 'isSubclassOf'.
     *
     * @uses ReflectionClass::isSubclassOf()
     *
     * @param mixed $a0 Originally named 'class'.
     */
    public function isSubclassOf(
        $a0
    ) {
    }

    /**
     * Inherited method 'isTrait'.
     *
     * @uses ReflectionClass::isTrait()
     */
    public function isTrait()
    {
    }

    /**
     * Inherited method 'isUserDefined'.
     *
     * @uses ReflectionClass::isUserDefined()
     */
    public function isUserDefined()
    {
    }

    /**
     * Inherited method 'newInstance'.
     *
     * @uses ReflectionClass::newInstance()
     *
     * @param mixed $a0 Originally named 'args'.
     */
    public function newInstance(
        $a0
    ) {
    }

    /**
     * Inherited method 'newInstanceArgs'.
     *
     * @uses ReflectionClass::newInstanceArgs()
     *
     * @param array $a0 Originally named 'args'.
     */
    public function newInstanceArgs(
        array $a0 = null
    ) {
    }

    /**
     * Inherited method 'newInstanceWithoutConstructor'.
     *
     * @uses ReflectionClass::newInstanceWithoutConstructor()
     */
    public function newInstanceWithoutConstructor()
    {
    }

    /**
     * Inherited method 'setStaticPropertyValue'.
     *
     * @uses ReflectionClass::setStaticPropertyValue()
     *
     * @param mixed $a0 Originally named 'name'.
     * @param mixed $a1 Originally named 'value'.
     */
    public function setStaticPropertyValue(
        $a0,
        $a1
    ) {
    }

    private $_stubs;
}
