<?php

/**
 * A mock class generated by Phony.
 *
 * @uses \Eloquent\Phony\Test\TestClassC
 *
 * This file is part of the Phony package.
 *
 * Copyright Â© 2014 Erin Millard
 *
 * For the full copyright and license information, please view the LICENSE file
 * that was distributed with the Phony source code.
 *
 * @link https://github.com/eloquent/phony
 */
class MockGeneratorSelfKeyword
extends \Eloquent\Phony\Test\TestClassC
implements \Eloquent\Phony\Mock\MockInterface
{
    /**
     * Inherited method 'methodA'.
     *
     * @uses \Eloquent\Phony\Test\TestClassC::methodA()
     *
     * @param \Eloquent\Phony\Test\TestClassC $a0 Was 'first'.
     * @param mixed                           $a1 Was 'second'.
     */
    public function methodA(
        \Eloquent\Phony\Test\TestClassC $a0,
        $a1 = \Eloquent\Phony\Test\TestClassC::CONSTANT_A
    ) {
        $argumentCount = func_num_args();
        $arguments = array();

        if ($argumentCount > 0) $arguments[] = $a0;
        if ($argumentCount > 1) $arguments[] = $a1;

        for ($i = 2; $i < $argumentCount; $i++) {
            $arguments[] = func_get_arg($i);
        }

        if (isset($this->_stubs[__FUNCTION__])) {
            return $this->_stubs[__FUNCTION__]->invokeWith(
                new \Eloquent\Phony\Call\Argument\Arguments($arguments)
            );
        }
    }

    /**
     * Inherited method 'methodB'.
     *
     * @uses \Eloquent\Phony\Test\TestClassC::methodB()
     *
     * @param mixed $a0 Was 'first'.
     * @param mixed $a1 Was 'second'.
     * @param mixed $a2 Was 'third'.
     */
    public function methodB(
        $a0,
        $a1 = 111,
        $a2 = 'second'
    ) {
        $argumentCount = func_num_args();
        $arguments = array();

        if ($argumentCount > 0) $arguments[] = $a0;
        if ($argumentCount > 1) $arguments[] = $a1;
        if ($argumentCount > 2) $arguments[] = $a2;

        for ($i = 3; $i < $argumentCount; $i++) {
            $arguments[] = func_get_arg($i);
        }

        if (isset($this->_stubs[__FUNCTION__])) {
            return $this->_stubs[__FUNCTION__]->invokeWith(
                new \Eloquent\Phony\Call\Argument\Arguments($arguments)
            );
        }
    }

    /**
     * Call a static parent method.
     *
     * @param string                                           $name      The method name.
     * @param \Eloquent\Phony\Call\Argument\ArgumentsInterface $arguments The arguments.
     */
    private static function _callParentStatic(
        $name,
        \Eloquent\Phony\Call\Argument\ArgumentsInterface $arguments
    ) {
        return call_user_func_array(
            array(__CLASS__, 'parent::' . $name),
            $arguments->all()
        );
    }

    /**
     * Call a parent method.
     *
     * @param string                                           $name      The method name.
     * @param \Eloquent\Phony\Call\Argument\ArgumentsInterface $arguments The arguments.
     */
    private function _callParent(
        $name,
        \Eloquent\Phony\Call\Argument\ArgumentsInterface $arguments
    ) {
        return call_user_func_array(
            array($this, 'parent::' . $name),
            $arguments->all()
        );
    }

    private static $_staticStubs = array();
    private static $_magicStaticStubs = array();
    private $_stubs = array();
    private $_magicStubs = array();
    private $_mockId;
}
