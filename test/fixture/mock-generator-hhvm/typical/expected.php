<?php

/**
 * A mock class generated by Phony.
 *
 * @uses stdClass
 * @uses Iterator
 * @uses Countable
 * @uses ArrayAccess
 * @uses Eloquent\Phony\Test\TestTraitA
 * @uses Eloquent\Phony\Test\TestTraitB
 *
 * This file is part of the Phony package.
 *
 * Copyright Â© 2014 Erin Millard
 *
 * For the full copyright and license information, please view the LICENSE file
 * that was distributed with the Phony source code.
 *
 * @link https://github.com/eloquent/phony
 */
class MockGeneratorTypicalTraits
extends stdClass
implements Eloquent\Phony\Mock\MockInterface,
           Iterator,
           Countable,
           ArrayAccess
{
    use Eloquent\Phony\Test\TestTraitA;
    use Eloquent\Phony\Test\TestTraitB;

    const CONSTANT_A = 'constantValueA';
    const CONSTANT_B = 444;

    /**
     * Custom static method 'methodA'.
     *
     * @param mixed $a0  Originally named 'first'.
     * @param mixed &$a1 Originally named 'second'.
     */
    public static function methodA(
        $a0,
        &$a1
    ) {
    }

    /**
     * Custom static method 'methodB'.
     *
     * @param mixed $a0 Originally named 'first'.
     * @param mixed $a1 Originally named 'second'.
     * @param mixed $a2 Originally named 'third'.
     * @param mixed $a3 Originally named 'fourth'.
     * @param mixed $a4 Originally named 'fifth'.
     * @param mixed $a5 Originally named 'sixth'.
     */
    public static function methodB(
        $a0 = null,
        $a1 = 111,
        $a2 = array(),
        $a3 = array('valueA', 'valueB'),
        $a4 = array('keyA' => 'valueA', 'keyB' => 'valueB'),
        $a5 = 256
    ) {
    }

    /**
     * Construct a mock.
     *
     * @param array<string,Eloquent\Phony\Stub\StubInterface>|null $stubs The stubs to use.
     */
    public function __construct(
        array $stubs = null
    ) {
        if (null === $stubs) {
            $stubs = array();
        }

        $this->_stubs = $stubs;
    }

    /**
     * Inherited method 'count'.
     *
     * @uses Countable::count()
     */
    public function count()
    {
    }

    /**
     * Inherited method 'current'.
     *
     * @uses Iterator::current()
     */
    public function current()
    {
    }

    /**
     * Inherited method 'key'.
     *
     * @uses Iterator::key()
     */
    public function key()
    {
    }

    /**
     * Custom method 'methodC'.
     *
     * @param Eloquent\Phony\Test\TestClass      $a0 Originally named 'first'.
     * @param Eloquent\Phony\Test\TestClass|null $a1 Originally named 'second'.
     * @param array                              $a2 Originally named 'third'.
     * @param array|null                         $a3 Originally named 'fourth'.
     */
    public function methodC(
        Eloquent\Phony\Test\TestClass $a0,
        Eloquent\Phony\Test\TestClass $a1 = null,
        array $a2 = array(),
        array $a3 = null
    ) {
    }

    /**
     * Custom method 'methodD'.
     */
    public function methodD()
    {
    }

    /**
     * Inherited method 'next'.
     *
     * @uses Iterator::next()
     */
    public function next()
    {
    }

    /**
     * Inherited method 'offsetExists'.
     *
     * @uses ArrayAccess::offsetExists()
     *
     * @param mixed $a0 Originally named 'index'.
     */
    public function offsetExists(
        $a0
    ) {
    }

    /**
     * Inherited method 'offsetGet'.
     *
     * @uses ArrayAccess::offsetGet()
     *
     * @param mixed $a0 Originally named 'index'.
     */
    public function offsetGet(
        $a0
    ) {
    }

    /**
     * Inherited method 'offsetSet'.
     *
     * @uses ArrayAccess::offsetSet()
     *
     * @param mixed $a0 Originally named 'index'.
     * @param mixed $a1 Originally named 'newvalue'.
     */
    public function offsetSet(
        $a0,
        $a1
    ) {
    }

    /**
     * Inherited method 'offsetUnset'.
     *
     * @uses ArrayAccess::offsetUnset()
     *
     * @param mixed $a0 Originally named 'index'.
     */
    public function offsetUnset(
        $a0
    ) {
    }

    /**
     * Inherited method 'rewind'.
     *
     * @uses Iterator::rewind()
     */
    public function rewind()
    {
    }

    /**
     * Inherited method 'valid'.
     *
     * @uses Iterator::valid()
     */
    public function valid()
    {
    }

    public static $propertyA = 'valueA';
    public static $propertyB = 222;
    public $propertyC = 'valueC';
    public $propertyD = 333;
    private $_stubs;
}
