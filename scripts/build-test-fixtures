#!/usr/bin/env php
<?php

use Eloquent\Asplode\Asplode;
use Eloquent\Phony\Assertion\Exception\AssertionException;
use Eloquent\Phony\Hook\FunctionHookGenerator;
use Eloquent\Phony\Mock\Builder\MockBuilderFactory;
use Eloquent\Phony\Reflection\FeatureDetector;
use Eloquent\Phony\Reflection\FunctionSignatureInspector;
use Eloquent\Phony\Test\Phony as TestPhony;

$rootPath = dirname(__DIR__);
require $rootPath . '/vendor/autoload.php';
require $rootPath . '/test/src/TestClassOldConstructor.php';

Asplode::install();

$fixturePath = $rootPath . '/test/fixture/';
$detector = FeatureDetector::instance();

$mockGeneratorFixturePath = $fixturePath . '/mock-generator';
$factory = MockBuilderFactory::instance();

foreach (scandir($mockGeneratorFixturePath) as $name) {
    if ('.' === $name[0]) {
        continue;
    }

    $thisPath = $mockGeneratorFixturePath . '/' . $name;
    $supportedPath = $thisPath . '/supported.php';

    if (is_file($supportedPath)) {
        $isSupported = require $supportedPath;

        if (!$isSupported) {
            continue;
        }
    }

    $builder = require $thisPath . '/builder.php';

    file_put_contents(
        $thisPath . '/expected.php',
        "<?php\n\n" . $builder->source()
    );
}

$hookGeneratorFixturePath = $fixturePath . '/hook-generator';
$signatureInspector = FunctionSignatureInspector::instance();
$hookGenerator = FunctionHookGenerator::instance();

foreach (scandir($hookGeneratorFixturePath) as $name) {
    if ('.' === $name[0]) {
        continue;
    }

    $thisPath = $hookGeneratorFixturePath . '/' . $name;
    $supportedPath = $thisPath . '/supported.php';

    if (is_file($supportedPath)) {
        $isSupported = require $supportedPath;

        if (!$isSupported) {
            continue;
        }
    }

    require $thisPath . '/callback.php';

    $signature = $signatureInspector->callbackSignature($callback);
    $source =
        $hookGenerator->generateHook($functionName, $namespace, $signature);

    file_put_contents(
        $thisPath . '/expected.php',
        "<?php\n\n" . $source
    );
}

$verificationFixturePath = $fixturePath . '/verification';

function visualizeAnsi($data)
{
    return preg_replace_callback(
        '/(\x9B|\x1B\[)([0-?]*[ -\/]*[@-~])/',
        function ($matches) {
            if ("\033[" !== $matches[1]) {
                throw new RuntimeException('Unexpected ANSI sequence.');
            }

            switch ($matches[2]) {
                case '0m': return '%RESET%';
                case '1m': return '%BOLD%';
                case '2m': return '%FAINT%';

                case '31m': return '%RED%';
                case '32m': return '%GREEN%';
                case '33m': return '%YELLOW%';
                case '36m': return '%CYAN%';
            }

            throw new RuntimeException(
                sprintf(
                    'Unexpected ANSI code %s.',
                    var_export($matches[2], true)
                )
            );
        },
        $data
    );
}

foreach (scandir($verificationFixturePath) as $group) {
    if ('.' === $group[0]) {
        continue;
    }

    $groupPath = $verificationFixturePath . '/' . $group;

    foreach (scandir($groupPath) as $name) {
        if ('.' === $name[0]) {
            continue;
        }

        $thisPath = $groupPath . '/' . $name;
        $supportedPath = $thisPath . '/supported.php';

        if (is_file($supportedPath)) {
            $isSupported = require $supportedPath;

            if (!$isSupported) {
                continue;
            }
        }

        try {
            require $thisPath . '/verification.php';

            throw new RuntimeException(
                'Verification did not throw an exception.'
            );
        } catch (AssertionException $e) {
        }

        file_put_contents(
            $thisPath . '/expected',
            visualizeAnsi($e->getMessage()) . "\n"
        );

        TestPhony::reset();
    }
}
